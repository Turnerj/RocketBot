// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct FieldInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FieldInfo GetRootAsFieldInfo(ByteBuffer _bb) { return GetRootAsFieldInfo(_bb, new FieldInfo()); }
  public static FieldInfo GetRootAsFieldInfo(ByteBuffer _bb, FieldInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FieldInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BoostPad? BoostPads(int j) { int o = __p.__offset(4); return o != 0 ? (BoostPad?)(new BoostPad()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BoostPadsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GoalInfo? Goals(int j) { int o = __p.__offset(6); return o != 0 ? (GoalInfo?)(new GoalInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GoalsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FieldInfo> CreateFieldInfo(FlatBufferBuilder builder,
      VectorOffset boostPadsOffset = default(VectorOffset),
      VectorOffset goalsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    FieldInfo.AddGoals(builder, goalsOffset);
    FieldInfo.AddBoostPads(builder, boostPadsOffset);
    return FieldInfo.EndFieldInfo(builder);
  }

  public static void StartFieldInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBoostPads(FlatBufferBuilder builder, VectorOffset boostPadsOffset) { builder.AddOffset(0, boostPadsOffset.Value, 0); }
  public static VectorOffset CreateBoostPadsVector(FlatBufferBuilder builder, Offset<BoostPad>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBoostPadsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGoals(FlatBufferBuilder builder, VectorOffset goalsOffset) { builder.AddOffset(1, goalsOffset.Value, 0); }
  public static VectorOffset CreateGoalsVector(FlatBufferBuilder builder, Offset<GoalInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartGoalsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FieldInfo> EndFieldInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FieldInfo>(o);
  }
};


}
