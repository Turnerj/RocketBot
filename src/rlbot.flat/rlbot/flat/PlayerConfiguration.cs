// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct PlayerConfiguration : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PlayerConfiguration GetRootAsPlayerConfiguration(ByteBuffer _bb) { return GetRootAsPlayerConfiguration(_bb, new PlayerConfiguration()); }
  public static PlayerConfiguration GetRootAsPlayerConfiguration(ByteBuffer _bb, PlayerConfiguration obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PlayerConfiguration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PlayerClass VarietyType { get { int o = __p.__offset(4); return o != 0 ? (PlayerClass)__p.bb.Get(o + __p.bb_pos) : PlayerClass.NONE; } }
  public TTable? Variety<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public int Team { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PlayerLoadout? Loadout { get { int o = __p.__offset(12); return o != 0 ? (PlayerLoadout?)(new PlayerLoadout()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<PlayerConfiguration> CreatePlayerConfiguration(FlatBufferBuilder builder,
      PlayerClass variety_type = PlayerClass.NONE,
      int varietyOffset = 0,
      StringOffset nameOffset = default(StringOffset),
      int team = 0,
      Offset<PlayerLoadout> loadoutOffset = default(Offset<PlayerLoadout>)) {
    builder.StartObject(5);
    PlayerConfiguration.AddLoadout(builder, loadoutOffset);
    PlayerConfiguration.AddTeam(builder, team);
    PlayerConfiguration.AddName(builder, nameOffset);
    PlayerConfiguration.AddVariety(builder, varietyOffset);
    PlayerConfiguration.AddVarietyType(builder, variety_type);
    return PlayerConfiguration.EndPlayerConfiguration(builder);
  }

  public static void StartPlayerConfiguration(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddVarietyType(FlatBufferBuilder builder, PlayerClass varietyType) { builder.AddByte(0, (byte)varietyType, 0); }
  public static void AddVariety(FlatBufferBuilder builder, int varietyOffset) { builder.AddOffset(1, varietyOffset, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddTeam(FlatBufferBuilder builder, int team) { builder.AddInt(3, team, 0); }
  public static void AddLoadout(FlatBufferBuilder builder, Offset<PlayerLoadout> loadoutOffset) { builder.AddOffset(4, loadoutOffset.Value, 0); }
  public static Offset<PlayerConfiguration> EndPlayerConfiguration(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerConfiguration>(o);
  }
};


}
