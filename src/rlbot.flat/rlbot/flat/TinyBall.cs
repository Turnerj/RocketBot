// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// A minimal version of the ball, useful when bandwidth needs to be conserved.
public struct TinyBall : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TinyBall GetRootAsTinyBall(ByteBuffer _bb) { return GetRootAsTinyBall(_bb, new TinyBall()); }
  public static TinyBall GetRootAsTinyBall(ByteBuffer _bb, TinyBall obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TinyBall __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3? Location { get { int o = __p.__offset(4); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? Velocity { get { int o = __p.__offset(6); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTinyBall(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<Vector3> locationOffset) { builder.AddStruct(0, locationOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<Vector3> velocityOffset) { builder.AddStruct(1, velocityOffset.Value, 0); }
  public static Offset<TinyBall> EndTinyBall(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TinyBall>(o);
  }
};


}
