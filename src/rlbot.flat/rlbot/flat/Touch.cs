// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct Touch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Touch GetRootAsTouch(ByteBuffer _bb) { return GetRootAsTouch(_bb, new Touch()); }
  public static Touch GetRootAsTouch(ByteBuffer _bb, Touch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Touch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The name of the player involved with the touch.
  public string PlayerName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPlayerNameBytes() { return __p.__vector_as_arraysegment(4); }
  /// Seconds that had elapsed in the game when the touch occurred.
  public float GameSeconds { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// The point of contact for the touch.
  public Vector3? Location { get { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// The direction of the touch.
  public Vector3? Normal { get { int o = __p.__offset(10); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// The Team which the touch belongs to, 0 for blue 1 for orange.
  public int Team { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartTouch(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddPlayerName(FlatBufferBuilder builder, StringOffset playerNameOffset) { builder.AddOffset(0, playerNameOffset.Value, 0); }
  public static void AddGameSeconds(FlatBufferBuilder builder, float gameSeconds) { builder.AddFloat(1, gameSeconds, 0.0f); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<Vector3> locationOffset) { builder.AddStruct(2, locationOffset.Value, 0); }
  public static void AddNormal(FlatBufferBuilder builder, Offset<Vector3> normalOffset) { builder.AddStruct(3, normalOffset.Value, 0); }
  public static void AddTeam(FlatBufferBuilder builder, int team) { builder.AddInt(4, team, 0); }
  public static Offset<Touch> EndTouch(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Touch>(o);
  }
};


}
