// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// Rigid body state for the ball.
public struct BallRigidBodyState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BallRigidBodyState GetRootAsBallRigidBodyState(ByteBuffer _bb) { return GetRootAsBallRigidBodyState(_bb, new BallRigidBodyState()); }
  public static BallRigidBodyState GetRootAsBallRigidBodyState(ByteBuffer _bb, BallRigidBodyState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BallRigidBodyState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RigidBodyState? State { get { int o = __p.__offset(4); return o != 0 ? (RigidBodyState?)(new RigidBodyState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BallRigidBodyState> CreateBallRigidBodyState(FlatBufferBuilder builder,
      Offset<RigidBodyState> stateOffset = default(Offset<RigidBodyState>)) {
    builder.StartObject(1);
    BallRigidBodyState.AddState(builder, stateOffset);
    return BallRigidBodyState.EndBallRigidBodyState(builder);
  }

  public static void StartBallRigidBodyState(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddState(FlatBufferBuilder builder, Offset<RigidBodyState> stateOffset) { builder.AddOffset(0, stateOffset.Value, 0); }
  public static Offset<BallRigidBodyState> EndBallRigidBodyState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BallRigidBodyState>(o);
  }
};


}
