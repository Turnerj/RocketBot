// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct PlayerInput : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PlayerInput GetRootAsPlayerInput(ByteBuffer _bb) { return GetRootAsPlayerInput(_bb, new PlayerInput()); }
  public static PlayerInput GetRootAsPlayerInput(ByteBuffer _bb, PlayerInput obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PlayerInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ControllerState? ControllerState { get { int o = __p.__offset(6); return o != 0 ? (ControllerState?)(new ControllerState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<PlayerInput> CreatePlayerInput(FlatBufferBuilder builder,
      int playerIndex = 0,
      Offset<ControllerState> controllerStateOffset = default(Offset<ControllerState>)) {
    builder.StartObject(2);
    PlayerInput.AddControllerState(builder, controllerStateOffset);
    PlayerInput.AddPlayerIndex(builder, playerIndex);
    return PlayerInput.EndPlayerInput(builder);
  }

  public static void StartPlayerInput(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPlayerIndex(FlatBufferBuilder builder, int playerIndex) { builder.AddInt(0, playerIndex, 0); }
  public static void AddControllerState(FlatBufferBuilder builder, Offset<ControllerState> controllerStateOffset) { builder.AddOffset(1, controllerStateOffset.Value, 0); }
  public static Offset<PlayerInput> EndPlayerInput(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerInput>(o);
  }
};


}
