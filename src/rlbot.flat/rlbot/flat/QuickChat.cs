// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct QuickChat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static QuickChat GetRootAsQuickChat(ByteBuffer _bb) { return GetRootAsQuickChat(_bb, new QuickChat()); }
  public static QuickChat GetRootAsQuickChat(ByteBuffer _bb, QuickChat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QuickChat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public QuickChatSelection QuickChatSelection { get { int o = __p.__offset(4); return o != 0 ? (QuickChatSelection)__p.bb.GetSbyte(o + __p.bb_pos) : QuickChatSelection.Information_IGotIt; } }
  /// The index of the player that sent the quick chat
  public int PlayerIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// True if the chat is team only false if everyone can see it.
  public bool TeamOnly { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<QuickChat> CreateQuickChat(FlatBufferBuilder builder,
      QuickChatSelection quickChatSelection = QuickChatSelection.Information_IGotIt,
      int playerIndex = 0,
      bool teamOnly = false) {
    builder.StartObject(3);
    QuickChat.AddPlayerIndex(builder, playerIndex);
    QuickChat.AddTeamOnly(builder, teamOnly);
    QuickChat.AddQuickChatSelection(builder, quickChatSelection);
    return QuickChat.EndQuickChat(builder);
  }

  public static void StartQuickChat(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddQuickChatSelection(FlatBufferBuilder builder, QuickChatSelection quickChatSelection) { builder.AddSbyte(0, (sbyte)quickChatSelection, 0); }
  public static void AddPlayerIndex(FlatBufferBuilder builder, int playerIndex) { builder.AddInt(1, playerIndex, 0); }
  public static void AddTeamOnly(FlatBufferBuilder builder, bool teamOnly) { builder.AddBool(2, teamOnly, false); }
  public static Offset<QuickChat> EndQuickChat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<QuickChat>(o);
  }
  public static void FinishQuickChatBuffer(FlatBufferBuilder builder, Offset<QuickChat> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedQuickChatBuffer(FlatBufferBuilder builder, Offset<QuickChat> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
