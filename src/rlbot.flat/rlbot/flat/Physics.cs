// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct Physics : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Physics GetRootAsPhysics(ByteBuffer _bb) { return GetRootAsPhysics(_bb, new Physics()); }
  public static Physics GetRootAsPhysics(ByteBuffer _bb, Physics obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Physics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3? Location { get { int o = __p.__offset(4); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Rotator? Rotation { get { int o = __p.__offset(6); return o != 0 ? (Rotator?)(new Rotator()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? Velocity { get { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? AngularVelocity { get { int o = __p.__offset(10); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPhysics(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<Vector3> locationOffset) { builder.AddStruct(0, locationOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Rotator> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<Vector3> velocityOffset) { builder.AddStruct(2, velocityOffset.Value, 0); }
  public static void AddAngularVelocity(FlatBufferBuilder builder, Offset<Vector3> angularVelocityOffset) { builder.AddStruct(3, angularVelocityOffset.Value, 0); }
  public static Offset<Physics> EndPhysics(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Physics>(o);
  }
};


}
