// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct MutatorSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MutatorSettings GetRootAsMutatorSettings(ByteBuffer _bb) { return GetRootAsMutatorSettings(_bb, new MutatorSettings()); }
  public static MutatorSettings GetRootAsMutatorSettings(ByteBuffer _bb, MutatorSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MutatorSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MatchLength MatchLength { get { int o = __p.__offset(4); return o != 0 ? (MatchLength)__p.bb.GetSbyte(o + __p.bb_pos) : MatchLength.Five_Minutes; } }
  public MaxScore MaxScore { get { int o = __p.__offset(6); return o != 0 ? (MaxScore)__p.bb.GetSbyte(o + __p.bb_pos) : MaxScore.Unlimited; } }
  public OvertimeOption OvertimeOption { get { int o = __p.__offset(8); return o != 0 ? (OvertimeOption)__p.bb.GetSbyte(o + __p.bb_pos) : OvertimeOption.Unlimited; } }
  public SeriesLengthOption SeriesLengthOption { get { int o = __p.__offset(10); return o != 0 ? (SeriesLengthOption)__p.bb.GetSbyte(o + __p.bb_pos) : SeriesLengthOption.Unlimited; } }
  public GameSpeedOption GameSpeedOption { get { int o = __p.__offset(12); return o != 0 ? (GameSpeedOption)__p.bb.GetSbyte(o + __p.bb_pos) : GameSpeedOption.Default; } }
  public BallMaxSpeedOption BallMaxSpeedOption { get { int o = __p.__offset(14); return o != 0 ? (BallMaxSpeedOption)__p.bb.GetSbyte(o + __p.bb_pos) : BallMaxSpeedOption.Default; } }
  public BallTypeOption BallTypeOption { get { int o = __p.__offset(16); return o != 0 ? (BallTypeOption)__p.bb.GetSbyte(o + __p.bb_pos) : BallTypeOption.Default; } }
  public BallWeightOption BallWeightOption { get { int o = __p.__offset(18); return o != 0 ? (BallWeightOption)__p.bb.GetSbyte(o + __p.bb_pos) : BallWeightOption.Default; } }
  public BallSizeOption BallSizeOption { get { int o = __p.__offset(20); return o != 0 ? (BallSizeOption)__p.bb.GetSbyte(o + __p.bb_pos) : BallSizeOption.Default; } }
  public BallBouncinessOption BallBouncinessOption { get { int o = __p.__offset(22); return o != 0 ? (BallBouncinessOption)__p.bb.GetSbyte(o + __p.bb_pos) : BallBouncinessOption.Default; } }
  public BoostOption BoostOption { get { int o = __p.__offset(24); return o != 0 ? (BoostOption)__p.bb.GetSbyte(o + __p.bb_pos) : BoostOption.Normal_Boost; } }
  public RumbleOption RumbleOption { get { int o = __p.__offset(26); return o != 0 ? (RumbleOption)__p.bb.GetSbyte(o + __p.bb_pos) : RumbleOption.None; } }
  public BoostStrengthOption BoostStrengthOption { get { int o = __p.__offset(28); return o != 0 ? (BoostStrengthOption)__p.bb.GetSbyte(o + __p.bb_pos) : BoostStrengthOption.One; } }
  public GravityOption GravityOption { get { int o = __p.__offset(30); return o != 0 ? (GravityOption)__p.bb.GetSbyte(o + __p.bb_pos) : GravityOption.Default; } }
  public DemolishOption DemolishOption { get { int o = __p.__offset(32); return o != 0 ? (DemolishOption)__p.bb.GetSbyte(o + __p.bb_pos) : DemolishOption.Default; } }
  public RespawnTimeOption RespawnTimeOption { get { int o = __p.__offset(34); return o != 0 ? (RespawnTimeOption)__p.bb.GetSbyte(o + __p.bb_pos) : RespawnTimeOption.Three_Seconds; } }

  public static Offset<MutatorSettings> CreateMutatorSettings(FlatBufferBuilder builder,
      MatchLength matchLength = MatchLength.Five_Minutes,
      MaxScore maxScore = MaxScore.Unlimited,
      OvertimeOption overtimeOption = OvertimeOption.Unlimited,
      SeriesLengthOption seriesLengthOption = SeriesLengthOption.Unlimited,
      GameSpeedOption gameSpeedOption = GameSpeedOption.Default,
      BallMaxSpeedOption ballMaxSpeedOption = BallMaxSpeedOption.Default,
      BallTypeOption ballTypeOption = BallTypeOption.Default,
      BallWeightOption ballWeightOption = BallWeightOption.Default,
      BallSizeOption ballSizeOption = BallSizeOption.Default,
      BallBouncinessOption ballBouncinessOption = BallBouncinessOption.Default,
      BoostOption boostOption = BoostOption.Normal_Boost,
      RumbleOption rumbleOption = RumbleOption.None,
      BoostStrengthOption boostStrengthOption = BoostStrengthOption.One,
      GravityOption gravityOption = GravityOption.Default,
      DemolishOption demolishOption = DemolishOption.Default,
      RespawnTimeOption respawnTimeOption = RespawnTimeOption.Three_Seconds) {
    builder.StartObject(16);
    MutatorSettings.AddRespawnTimeOption(builder, respawnTimeOption);
    MutatorSettings.AddDemolishOption(builder, demolishOption);
    MutatorSettings.AddGravityOption(builder, gravityOption);
    MutatorSettings.AddBoostStrengthOption(builder, boostStrengthOption);
    MutatorSettings.AddRumbleOption(builder, rumbleOption);
    MutatorSettings.AddBoostOption(builder, boostOption);
    MutatorSettings.AddBallBouncinessOption(builder, ballBouncinessOption);
    MutatorSettings.AddBallSizeOption(builder, ballSizeOption);
    MutatorSettings.AddBallWeightOption(builder, ballWeightOption);
    MutatorSettings.AddBallTypeOption(builder, ballTypeOption);
    MutatorSettings.AddBallMaxSpeedOption(builder, ballMaxSpeedOption);
    MutatorSettings.AddGameSpeedOption(builder, gameSpeedOption);
    MutatorSettings.AddSeriesLengthOption(builder, seriesLengthOption);
    MutatorSettings.AddOvertimeOption(builder, overtimeOption);
    MutatorSettings.AddMaxScore(builder, maxScore);
    MutatorSettings.AddMatchLength(builder, matchLength);
    return MutatorSettings.EndMutatorSettings(builder);
  }

  public static void StartMutatorSettings(FlatBufferBuilder builder) { builder.StartObject(16); }
  public static void AddMatchLength(FlatBufferBuilder builder, MatchLength matchLength) { builder.AddSbyte(0, (sbyte)matchLength, 0); }
  public static void AddMaxScore(FlatBufferBuilder builder, MaxScore maxScore) { builder.AddSbyte(1, (sbyte)maxScore, 0); }
  public static void AddOvertimeOption(FlatBufferBuilder builder, OvertimeOption overtimeOption) { builder.AddSbyte(2, (sbyte)overtimeOption, 0); }
  public static void AddSeriesLengthOption(FlatBufferBuilder builder, SeriesLengthOption seriesLengthOption) { builder.AddSbyte(3, (sbyte)seriesLengthOption, 0); }
  public static void AddGameSpeedOption(FlatBufferBuilder builder, GameSpeedOption gameSpeedOption) { builder.AddSbyte(4, (sbyte)gameSpeedOption, 0); }
  public static void AddBallMaxSpeedOption(FlatBufferBuilder builder, BallMaxSpeedOption ballMaxSpeedOption) { builder.AddSbyte(5, (sbyte)ballMaxSpeedOption, 0); }
  public static void AddBallTypeOption(FlatBufferBuilder builder, BallTypeOption ballTypeOption) { builder.AddSbyte(6, (sbyte)ballTypeOption, 0); }
  public static void AddBallWeightOption(FlatBufferBuilder builder, BallWeightOption ballWeightOption) { builder.AddSbyte(7, (sbyte)ballWeightOption, 0); }
  public static void AddBallSizeOption(FlatBufferBuilder builder, BallSizeOption ballSizeOption) { builder.AddSbyte(8, (sbyte)ballSizeOption, 0); }
  public static void AddBallBouncinessOption(FlatBufferBuilder builder, BallBouncinessOption ballBouncinessOption) { builder.AddSbyte(9, (sbyte)ballBouncinessOption, 0); }
  public static void AddBoostOption(FlatBufferBuilder builder, BoostOption boostOption) { builder.AddSbyte(10, (sbyte)boostOption, 0); }
  public static void AddRumbleOption(FlatBufferBuilder builder, RumbleOption rumbleOption) { builder.AddSbyte(11, (sbyte)rumbleOption, 0); }
  public static void AddBoostStrengthOption(FlatBufferBuilder builder, BoostStrengthOption boostStrengthOption) { builder.AddSbyte(12, (sbyte)boostStrengthOption, 0); }
  public static void AddGravityOption(FlatBufferBuilder builder, GravityOption gravityOption) { builder.AddSbyte(13, (sbyte)gravityOption, 0); }
  public static void AddDemolishOption(FlatBufferBuilder builder, DemolishOption demolishOption) { builder.AddSbyte(14, (sbyte)demolishOption, 0); }
  public static void AddRespawnTimeOption(FlatBufferBuilder builder, RespawnTimeOption respawnTimeOption) { builder.AddSbyte(15, (sbyte)respawnTimeOption, 0); }
  public static Offset<MutatorSettings> EndMutatorSettings(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MutatorSettings>(o);
  }
};


}
