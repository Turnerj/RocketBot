// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// The state of a rigid body in Rocket League's physics engine.
/// This gets updated in time with the physics tick, not the rendering framerate.
/// The frame field will be incremented every time the physics engine ticks.
public struct RigidBodyState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RigidBodyState GetRootAsRigidBodyState(ByteBuffer _bb) { return GetRootAsRigidBodyState(_bb, new RigidBodyState()); }
  public static RigidBodyState GetRootAsRigidBodyState(ByteBuffer _bb, RigidBodyState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RigidBodyState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Frame { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vector3? Location { get { int o = __p.__offset(6); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Quaternion? Rotation { get { int o = __p.__offset(8); return o != 0 ? (Quaternion?)(new Quaternion()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? Velocity { get { int o = __p.__offset(10); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? AngularVelocity { get { int o = __p.__offset(12); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartRigidBodyState(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddFrame(FlatBufferBuilder builder, int frame) { builder.AddInt(0, frame, 0); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<Vector3> locationOffset) { builder.AddStruct(1, locationOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Quaternion> rotationOffset) { builder.AddStruct(2, rotationOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<Vector3> velocityOffset) { builder.AddStruct(3, velocityOffset.Value, 0); }
  public static void AddAngularVelocity(FlatBufferBuilder builder, Offset<Vector3> angularVelocityOffset) { builder.AddStruct(4, angularVelocityOffset.Value, 0); }
  public static Offset<RigidBodyState> EndRigidBodyState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RigidBodyState>(o);
  }
};


}
