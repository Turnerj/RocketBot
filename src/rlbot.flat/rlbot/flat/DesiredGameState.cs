// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct DesiredGameState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DesiredGameState GetRootAsDesiredGameState(ByteBuffer _bb) { return GetRootAsDesiredGameState(_bb, new DesiredGameState()); }
  public static DesiredGameState GetRootAsDesiredGameState(ByteBuffer _bb, DesiredGameState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DesiredGameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DesiredBallState? BallState { get { int o = __p.__offset(4); return o != 0 ? (DesiredBallState?)(new DesiredBallState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public DesiredCarState? CarStates(int j) { int o = __p.__offset(6); return o != 0 ? (DesiredCarState?)(new DesiredCarState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CarStatesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public DesiredBoostState? BoostStates(int j) { int o = __p.__offset(8); return o != 0 ? (DesiredBoostState?)(new DesiredBoostState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BoostStatesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public DesiredGameInfoState? GameInfoState { get { int o = __p.__offset(10); return o != 0 ? (DesiredGameInfoState?)(new DesiredGameInfoState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<DesiredGameState> CreateDesiredGameState(FlatBufferBuilder builder,
      Offset<DesiredBallState> ballStateOffset = default(Offset<DesiredBallState>),
      VectorOffset carStatesOffset = default(VectorOffset),
      VectorOffset boostStatesOffset = default(VectorOffset),
      Offset<DesiredGameInfoState> gameInfoStateOffset = default(Offset<DesiredGameInfoState>)) {
    builder.StartObject(4);
    DesiredGameState.AddGameInfoState(builder, gameInfoStateOffset);
    DesiredGameState.AddBoostStates(builder, boostStatesOffset);
    DesiredGameState.AddCarStates(builder, carStatesOffset);
    DesiredGameState.AddBallState(builder, ballStateOffset);
    return DesiredGameState.EndDesiredGameState(builder);
  }

  public static void StartDesiredGameState(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddBallState(FlatBufferBuilder builder, Offset<DesiredBallState> ballStateOffset) { builder.AddOffset(0, ballStateOffset.Value, 0); }
  public static void AddCarStates(FlatBufferBuilder builder, VectorOffset carStatesOffset) { builder.AddOffset(1, carStatesOffset.Value, 0); }
  public static VectorOffset CreateCarStatesVector(FlatBufferBuilder builder, Offset<DesiredCarState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCarStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBoostStates(FlatBufferBuilder builder, VectorOffset boostStatesOffset) { builder.AddOffset(2, boostStatesOffset.Value, 0); }
  public static VectorOffset CreateBoostStatesVector(FlatBufferBuilder builder, Offset<DesiredBoostState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBoostStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGameInfoState(FlatBufferBuilder builder, Offset<DesiredGameInfoState> gameInfoStateOffset) { builder.AddOffset(3, gameInfoStateOffset.Value, 0); }
  public static Offset<DesiredGameState> EndDesiredGameState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DesiredGameState>(o);
  }
};


}
