// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct BoostPadState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BoostPadState GetRootAsBoostPadState(ByteBuffer _bb) { return GetRootAsBoostPadState(_bb, new BoostPadState()); }
  public static BoostPadState GetRootAsBoostPadState(ByteBuffer _bb, BoostPadState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BoostPadState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// True if the boost can be picked up
  public bool IsActive { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
  public float Timer { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<BoostPadState> CreateBoostPadState(FlatBufferBuilder builder,
      bool isActive = false,
      float timer = 0.0f) {
    builder.StartObject(2);
    BoostPadState.AddTimer(builder, timer);
    BoostPadState.AddIsActive(builder, isActive);
    return BoostPadState.EndBoostPadState(builder);
  }

  public static void StartBoostPadState(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIsActive(FlatBufferBuilder builder, bool isActive) { builder.AddBool(0, isActive, false); }
  public static void AddTimer(FlatBufferBuilder builder, float timer) { builder.AddFloat(1, timer, 0.0f); }
  public static Offset<BoostPadState> EndBoostPadState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BoostPadState>(o);
  }
};


}
