// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct RenderGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RenderGroup GetRootAsRenderGroup(ByteBuffer _bb) { return GetRootAsRenderGroup(_bb, new RenderGroup()); }
  public static RenderGroup GetRootAsRenderGroup(ByteBuffer _bb, RenderGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RenderGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RenderMessage? RenderMessages(int j) { int o = __p.__offset(4); return o != 0 ? (RenderMessage?)(new RenderMessage()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RenderMessagesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The id of the render group
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<RenderGroup> CreateRenderGroup(FlatBufferBuilder builder,
      VectorOffset renderMessagesOffset = default(VectorOffset),
      int id = 0) {
    builder.StartObject(2);
    RenderGroup.AddId(builder, id);
    RenderGroup.AddRenderMessages(builder, renderMessagesOffset);
    return RenderGroup.EndRenderGroup(builder);
  }

  public static void StartRenderGroup(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddRenderMessages(FlatBufferBuilder builder, VectorOffset renderMessagesOffset) { builder.AddOffset(0, renderMessagesOffset.Value, 0); }
  public static VectorOffset CreateRenderMessagesVector(FlatBufferBuilder builder, Offset<RenderMessage>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRenderMessagesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static Offset<RenderGroup> EndRenderGroup(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RenderGroup>(o);
  }
};


}
