// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// Rigid body state for a player / car in the game. Includes the latest
/// controller input, which is otherwise difficult to correlate with consequences.
public struct PlayerRigidBodyState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PlayerRigidBodyState GetRootAsPlayerRigidBodyState(ByteBuffer _bb) { return GetRootAsPlayerRigidBodyState(_bb, new PlayerRigidBodyState()); }
  public static PlayerRigidBodyState GetRootAsPlayerRigidBodyState(ByteBuffer _bb, PlayerRigidBodyState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PlayerRigidBodyState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RigidBodyState? State { get { int o = __p.__offset(4); return o != 0 ? (RigidBodyState?)(new RigidBodyState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ControllerState? Input { get { int o = __p.__offset(6); return o != 0 ? (ControllerState?)(new ControllerState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<PlayerRigidBodyState> CreatePlayerRigidBodyState(FlatBufferBuilder builder,
      Offset<RigidBodyState> stateOffset = default(Offset<RigidBodyState>),
      Offset<ControllerState> inputOffset = default(Offset<ControllerState>)) {
    builder.StartObject(2);
    PlayerRigidBodyState.AddInput(builder, inputOffset);
    PlayerRigidBodyState.AddState(builder, stateOffset);
    return PlayerRigidBodyState.EndPlayerRigidBodyState(builder);
  }

  public static void StartPlayerRigidBodyState(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddState(FlatBufferBuilder builder, Offset<RigidBodyState> stateOffset) { builder.AddOffset(0, stateOffset.Value, 0); }
  public static void AddInput(FlatBufferBuilder builder, Offset<ControllerState> inputOffset) { builder.AddOffset(1, inputOffset.Value, 0); }
  public static Offset<PlayerRigidBodyState> EndPlayerRigidBodyState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerRigidBodyState>(o);
  }
};


}
