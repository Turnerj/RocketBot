// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct GameTickPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameTickPacket GetRootAsGameTickPacket(ByteBuffer _bb) { return GetRootAsGameTickPacket(_bb, new GameTickPacket()); }
  public static GameTickPacket GetRootAsGameTickPacket(ByteBuffer _bb, GameTickPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameTickPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PlayerInfo? Players(int j) { int o = __p.__offset(4); return o != 0 ? (PlayerInfo?)(new PlayerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public BoostPadState? BoostPadStates(int j) { int o = __p.__offset(6); return o != 0 ? (BoostPadState?)(new BoostPadState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BoostPadStatesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public BallInfo? Ball { get { int o = __p.__offset(8); return o != 0 ? (BallInfo?)(new BallInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GameInfo? GameInfo { get { int o = __p.__offset(10); return o != 0 ? (GameInfo?)(new GameInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public DropshotTile? TileInformation(int j) { int o = __p.__offset(12); return o != 0 ? (DropshotTile?)(new DropshotTile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TileInformationLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public TeamInfo? Teams(int j) { int o = __p.__offset(14); return o != 0 ? (TeamInfo?)(new TeamInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TeamsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameTickPacket> CreateGameTickPacket(FlatBufferBuilder builder,
      VectorOffset playersOffset = default(VectorOffset),
      VectorOffset boostPadStatesOffset = default(VectorOffset),
      Offset<BallInfo> ballOffset = default(Offset<BallInfo>),
      Offset<GameInfo> gameInfoOffset = default(Offset<GameInfo>),
      VectorOffset tileInformationOffset = default(VectorOffset),
      VectorOffset teamsOffset = default(VectorOffset)) {
    builder.StartObject(6);
    GameTickPacket.AddTeams(builder, teamsOffset);
    GameTickPacket.AddTileInformation(builder, tileInformationOffset);
    GameTickPacket.AddGameInfo(builder, gameInfoOffset);
    GameTickPacket.AddBall(builder, ballOffset);
    GameTickPacket.AddBoostPadStates(builder, boostPadStatesOffset);
    GameTickPacket.AddPlayers(builder, playersOffset);
    return GameTickPacket.EndGameTickPacket(builder);
  }

  public static void StartGameTickPacket(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(0, playersOffset.Value, 0); }
  public static VectorOffset CreatePlayersVector(FlatBufferBuilder builder, Offset<PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBoostPadStates(FlatBufferBuilder builder, VectorOffset boostPadStatesOffset) { builder.AddOffset(1, boostPadStatesOffset.Value, 0); }
  public static VectorOffset CreateBoostPadStatesVector(FlatBufferBuilder builder, Offset<BoostPadState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBoostPadStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBall(FlatBufferBuilder builder, Offset<BallInfo> ballOffset) { builder.AddOffset(2, ballOffset.Value, 0); }
  public static void AddGameInfo(FlatBufferBuilder builder, Offset<GameInfo> gameInfoOffset) { builder.AddOffset(3, gameInfoOffset.Value, 0); }
  public static void AddTileInformation(FlatBufferBuilder builder, VectorOffset tileInformationOffset) { builder.AddOffset(4, tileInformationOffset.Value, 0); }
  public static VectorOffset CreateTileInformationVector(FlatBufferBuilder builder, Offset<DropshotTile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTileInformationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTeams(FlatBufferBuilder builder, VectorOffset teamsOffset) { builder.AddOffset(5, teamsOffset.Value, 0); }
  public static VectorOffset CreateTeamsVector(FlatBufferBuilder builder, Offset<TeamInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTeamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameTickPacket> EndGameTickPacket(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameTickPacket>(o);
  }
};


}
