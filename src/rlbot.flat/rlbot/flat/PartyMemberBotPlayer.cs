// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// A player that Rocket League treats as human, e.g. has a dedicated camera and can do training mode,
/// but is actually controlled by a bot.
public struct PartyMemberBotPlayer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PartyMemberBotPlayer GetRootAsPartyMemberBotPlayer(ByteBuffer _bb) { return GetRootAsPartyMemberBotPlayer(_bb, new PartyMemberBotPlayer()); }
  public static PartyMemberBotPlayer GetRootAsPartyMemberBotPlayer(ByteBuffer _bb, PartyMemberBotPlayer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PartyMemberBotPlayer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartPartyMemberBotPlayer(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<PartyMemberBotPlayer> EndPartyMemberBotPlayer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PartyMemberBotPlayer>(o);
  }
};


}
