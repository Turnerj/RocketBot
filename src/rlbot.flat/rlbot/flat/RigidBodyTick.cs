// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// Contains all rigid body state information.
public struct RigidBodyTick : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RigidBodyTick GetRootAsRigidBodyTick(ByteBuffer _bb) { return GetRootAsRigidBodyTick(_bb, new RigidBodyTick()); }
  public static RigidBodyTick GetRootAsRigidBodyTick(ByteBuffer _bb, RigidBodyTick obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RigidBodyTick __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BallRigidBodyState? Ball { get { int o = __p.__offset(4); return o != 0 ? (BallRigidBodyState?)(new BallRigidBodyState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public PlayerRigidBodyState? Players(int j) { int o = __p.__offset(6); return o != 0 ? (PlayerRigidBodyState?)(new PlayerRigidBodyState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<RigidBodyTick> CreateRigidBodyTick(FlatBufferBuilder builder,
      Offset<BallRigidBodyState> ballOffset = default(Offset<BallRigidBodyState>),
      VectorOffset playersOffset = default(VectorOffset)) {
    builder.StartObject(2);
    RigidBodyTick.AddPlayers(builder, playersOffset);
    RigidBodyTick.AddBall(builder, ballOffset);
    return RigidBodyTick.EndRigidBodyTick(builder);
  }

  public static void StartRigidBodyTick(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBall(FlatBufferBuilder builder, Offset<BallRigidBodyState> ballOffset) { builder.AddOffset(0, ballOffset.Value, 0); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(1, playersOffset.Value, 0); }
  public static VectorOffset CreatePlayersVector(FlatBufferBuilder builder, Offset<PlayerRigidBodyState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<RigidBodyTick> EndRigidBodyTick(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RigidBodyTick>(o);
  }
};


}
