// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct DropshotTile : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DropshotTile GetRootAsDropshotTile(ByteBuffer _bb) { return GetRootAsDropshotTile(_bb, new DropshotTile()); }
  public static DropshotTile GetRootAsDropshotTile(ByteBuffer _bb, DropshotTile obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DropshotTile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The amount of damage the tile has sustained.
  public TileState TileState { get { int o = __p.__offset(4); return o != 0 ? (TileState)__p.bb.GetSbyte(o + __p.bb_pos) : TileState.Unknown; } }

  public static Offset<DropshotTile> CreateDropshotTile(FlatBufferBuilder builder,
      TileState tileState = TileState.Unknown) {
    builder.StartObject(1);
    DropshotTile.AddTileState(builder, tileState);
    return DropshotTile.EndDropshotTile(builder);
  }

  public static void StartDropshotTile(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTileState(FlatBufferBuilder builder, TileState tileState) { builder.AddSbyte(0, (sbyte)tileState, 0); }
  public static Offset<DropshotTile> EndDropshotTile(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DropshotTile>(o);
  }
};


}
